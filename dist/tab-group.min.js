!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports):"function"==typeof define&&define.amd?define(["exports"],e):e((t="undefined"!=typeof globalThis?globalThis:t||self).TabGroup={})}(this,(function(t){"use strict";class TabGroup extends HTMLElement{static tabCount=0;static panelCount=0;constructor(){super(),this.ensureConsistentTabsAndPanels()}ensureConsistentTabsAndPanels(){let t=this.querySelectorAll("tab-button"),e=this.querySelectorAll("tab-panel");if(e.length>t.length){const n=e.length-t.length;let a=this.querySelector("tab-list");a||(a=document.createElement("tab-list"),this.insertBefore(a,this.firstChild));for(let t=0;t<n;t++){const t=document.createElement("tab-button");t.textContent="default tab",a.appendChild(t)}}else if(t.length>e.length){const n=t.length-e.length;for(let t=0;t<n;t++){const t=document.createElement("tab-panel");t.innerHTML="<p>default panel content</p>",this.appendChild(t)}}}connectedCallback(){const t=this;t.tabList=t.querySelector("tab-list"),t.tabList&&(t.tabButtons=Array.from(t.tabList.querySelectorAll("tab-button")),t.tabPanels=Array.from(t.querySelectorAll("tab-panel")),t.tabButtons.forEach(((t,e)=>{const n=TabGroup.tabCount++,a=`tab-${n}`;t.id=a;const s=`panel-${n}`;t.setAttribute("role","tab"),t.setAttribute("aria-controls",s),0===e?(t.setAttribute("aria-selected","true"),t.setAttribute("tabindex","0")):(t.setAttribute("aria-selected","false"),t.setAttribute("tabindex","-1"))})),t.tabPanels.forEach(((t,e)=>{const n=TabGroup.panelCount++,a=`panel-${n}`;t.id=a,t.setAttribute("role","tabpanel"),t.setAttribute("aria-labelledby",`tab-${n}`),t.hidden=0!==e})),t.tabList.setAttribute("role","tablist"),t.tabList.addEventListener("keydown",(e=>t.onKeyDown(e))),t.tabList.addEventListener("click",(e=>t.onClick(e))))}setActiveTab(t){const e=this,n=e.tabButtons.findIndex((t=>"true"===t.getAttribute("aria-selected")));if(e.tabButtons.forEach(((e,n)=>{const a=n===t;e.setAttribute("aria-selected",a?"true":"false"),e.setAttribute("tabindex",a?"0":"-1"),a&&e.focus()})),e.tabPanels.forEach(((e,n)=>{e.hidden=n!==t})),n!==t){const a={previousIndex:n,currentIndex:t,previousTab:e.tabButtons[n],currentTab:e.tabButtons[t],previousPanel:e.tabPanels[n],currentPanel:e.tabPanels[t]};e.dispatchEvent(new CustomEvent("tabchange",{detail:a,bubbles:!0}))}}onClick(t){const e=t.target.closest("tab-button");if(!e)return;const n=this.tabButtons.indexOf(e);-1!==n&&this.setActiveTab(n)}onKeyDown(t){const e=this,n=e.tabButtons.indexOf(t.target);if(-1===n)return;let a=n;switch(t.key){case"ArrowLeft":case"ArrowUp":a=n>0?n-1:e.tabButtons.length-1,t.preventDefault();break;case"ArrowRight":case"ArrowDown":a=(n+1)%e.tabButtons.length,t.preventDefault();break;case"Home":a=0,t.preventDefault();break;case"End":a=e.tabButtons.length-1,t.preventDefault();break;default:return}e.setActiveTab(a)}}class TabList extends HTMLElement{constructor(){super()}connectedCallback(){}}class TabButton extends HTMLElement{constructor(){super()}connectedCallback(){}}class TabPanel extends HTMLElement{constructor(){super()}connectedCallback(){}}customElements.define("tab-group",TabGroup),customElements.define("tab-list",TabList),customElements.define("tab-button",TabButton),customElements.define("tab-panel",TabPanel),t.TabGroup=TabGroup,t.default=TabGroup,Object.defineProperty(t,"__esModule",{value:!0})}));
